scalar Date

type User {
  id: ID!
  email: String!
  name: String!
  address: AddressType!
  phoneNumber: String!
  createdAt: Date!
  updatedAt: Date!
  role: Role!
}

enum Role {
  USER,
  ADMIN
}

type AddressType {
  street: String!
  city: String!
  state: String!
  country: String!
  zipCode: String!
  coordinates: [String!]!
}

input CreateUserAddressInput {
  street: String!
  city: String!
  state: String!
  country: String!
  zipCode: String!
  coordinates: [String!]!
}

input UpdateUserAddressInput {
  street: String
  city: String
  state: String
  country: String
  zipCode: String
  coordinates: [String!]
}

input CreateUserInput {
  email: String!
  name: String!
  address: CreateUserAddressInput!
  phoneNumber: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  email: String
  name: String
  address: CreateUserAddressInput
  phoneNumber: String
}

input UpdatePasswordInput {
  id: ID!
  oldPassword: String!
  newPassword: String!
}

type Query {
  users: [User]!
  user(id: ID!): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserPassword(updateUserPasswordInput: UpdatePasswordInput!): User!
  removeUser(id: ID!): User
}
